'''
https://leetcode.com/problems/binary-search/description/
Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4
Example 2:

Input: nums = [-1,0,3,5,9,12], target = 2
Output: -1
Explanation: 2 does not exist in nums so return -1
 


'''



class BinSearch():
    def __init__(self):
        print('Abba')

    def FindTarget(self, in_list, target, start, end):
        mid = int((start + end) /2)
        print(in_list, ' ', target, ' start/end= ', start, ' ', end, ' mid=', mid)
        #return 10

        if start == end:
            if in_list[start] == target:
                return start
            else:
                return -1
        elif end > start:
            if target == in_list[mid]:
                return mid
            elif target > in_list[mid]:
                return self.FindTarget(in_list, target, mid+1, end)
            elif target < in_list[mid]:
                return self.FindTarget(in_list, target, start, mid-1)
            else:
                return -1
        else:
            return -1


nums = [-1,0,3,5,9,12]
target = 9
#nums = [-1,0,3,5,9,12]
#target = 2

#nums = [5]
#target = 5
#nums = [2,5]
#target = 0


x = BinSearch()
y = x.FindTarget(nums, target, 0, len(nums)-1)
print(y)
