import datetime

class Knapsack:
    def __init__(self):
        print('hi there')

        self.values = [
            360, 83, 59, 130, 431, 67, 230, 52, 93, 125, 670, 892, 600, 38, 48, 147, 78, 256, 63, 17, 120, 164,
            32, 35, 92, 110, 22, 42, 50, 323, 514,
            28, 87, 73, 78, 15, 26, 78, 210, 36, 85, 189, 274, 43, 33, 10, 19, 389, 276, 312]

        self.weights = [
            7, 0, 30, 22, 80, 94, 11, 81, 70, 64, 59, 18, 0, 36, 3, 8, 15, 42, 9, 0, 42, 47, 52, 32, 26, 48,
            55, 6, 29, 84, 2, 4, 18, 56, 7, 29, 93, 44, 71,
            3, 86, 66, 31, 65, 0, 79, 20, 65, 52, 13]

        # self.weights = [3, 4, 5]
        # self.values = [30, 50, 60]

        self.capacities = [850]
        self.dp = [[-1] * 5000] * 5000
        # print(self.dp)

        print(datetime.datetime.now())
        ans = self.ReturnMaxValue(len(self.values) - 1, 850)
        print('Idrees ans=', ans)
        print(datetime.datetime.now())

    def ReturnMaxValue(self, in_index, in_remaining_capacity):
        # print('1. --', in_index, in_remaining_capacity)

        if (in_index < 0):
            return 0
        if (in_remaining_capacity < 0):
            return 0
        # print('2. --', in_index, in_remaining_capacity)
        if self.dp[in_index][in_remaining_capacity] > -1:
            return self.dp[in_index][in_remaining_capacity]


        # if item i is not selected
        remaining_capacity = in_remaining_capacity
        value1 = self.ReturnMaxValue(in_index - 1, remaining_capacity)


        # if item i is selected
        value2 = -1
        # print('3. --', in_index, in_remaining_capacity)
        if in_remaining_capacity - self.weights[in_index] > 0:
            remaining_capacity = in_remaining_capacity - self.weights[in_index]
            value2 = self.values[in_index] + self.ReturnMaxValue(in_index - 1, remaining_capacity)

        ans = max(value1, value2)
        self.dp[in_index][in_remaining_capacity] = ans
        return (ans)



x = Knapsack()
